
package com.a03.login;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "LoginImpl", targetNamespace = "http://login.a03.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface LoginImpl {


    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "register", targetNamespace = "http://login.a03.com/", className = "com.a03.login.Register")
    @ResponseWrapper(localName = "registerResponse", targetNamespace = "http://login.a03.com/", className = "com.a03.login.RegisterResponse")
    @Action(input = "http://login.a03.com/LoginImpl/registerRequest", output = "http://login.a03.com/LoginImpl/registerResponse")
    public void register(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isUsernameConflict", targetNamespace = "http://login.a03.com/", className = "com.a03.login.IsUsernameConflict")
    @ResponseWrapper(localName = "isUsernameConflictResponse", targetNamespace = "http://login.a03.com/", className = "com.a03.login.IsUsernameConflictResponse")
    @Action(input = "http://login.a03.com/LoginImpl/isUsernameConflictRequest", output = "http://login.a03.com/LoginImpl/isUsernameConflictResponse")
    public boolean isUsernameConflict(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "login", targetNamespace = "http://login.a03.com/", className = "com.a03.login.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "http://login.a03.com/", className = "com.a03.login.LoginResponse")
    @Action(input = "http://login.a03.com/LoginImpl/loginRequest", output = "http://login.a03.com/LoginImpl/loginResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://login.a03.com/LoginImpl/login/Fault/Exception")
    })
    public String login(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws Exception_Exception
    ;

}
